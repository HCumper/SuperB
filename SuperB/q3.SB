97 astring$ = "hhh"
100 CLS
110 TURBO_repfil
120 sorts=0:partitions=0
140 DIM a(10001)
150 DIM b(1,2,3)
160 LET shortlist=9
170 set_up_tabLe
180 FOR lo=1 TO n : b(lo)=a(lo)
190 now = DATE
200 b(n+1)=10001
210 quicksort 1,n
220 check
230 INPUT t$
240 STOP
250 FOR lo=1 TO n : b(lo)=a(lo)
260 REMark b(n+1)=10001
270 sorts=0:partitions=0
280 now = DATE
290 QUICKSORT2 1,n
300 PRINT sorts,partitions
310 check
320 STOP
330 :
340 DEFine PROCedure check
350 PRINT "Time" ! DATE-now
360 FOR loop = 1 TO n-1
370 IF b(loop) > b(loop + 1) THEN PRINT "Error at" ! loop
380 END FOR loop
390 END DEFine
400 DEFine PROCedure set_up_tabLe
410 LOCal entry
420   INPUT "How many numbers? ";n
430   FOR entry=1 TO n
440     a(entry)=RND(1 TO 10000)
450   END FOR entry
460   LET now=DATE
470 END DEFine
480 :
481 DEFine FuNction foo (param1, param2)
484 END DEFine
490 DEFine PROCedure print_table
500 LOCal pos
510   LET finished=DATE-now
520   PRINT : PRINT
530   BEEP 10000,100
540   FOR pos=n-4 TO n
550     PRINT a(pos)
560   END FOR pos
570   PRINT "Time taken" ! finished
580 END DEFine
590 :
600 IMPLICIT% l, r, i, j, pivot
605 REFERENCE r
610 DEFine PROCedure quicksort(l,r)
620 LOCal i,j,pivot
630   i=l : j=r
640   REMark IF b(i)<b(i+1) : swap b(i),b(i+1)
650   REMark IF b(i+1)>b(j) : swap b(i+1),b(j)
660   REMark IF b(i)>b(i+1) : swap b(i),b(i+1)
670   pivot=b(i)
680   REPeat loop
690     REPeat inc_k
700       IF pivot<=b(i) : EXIT inc_k
710       i=i+1
720     END REPeat inc_k
730     REPeat dec_j
740       IF pivot>=b(j) : EXIT dec_j
750       j=j-1
760     END REPeat dec_j
770     IF i<j : swap b(i),b(j)
780     IF i<=j : i=i+1 : j=j-1
790     IF i>j : EXIT loop
800   END REPeat loop
810   IF l< j THEN
820     IF j-l >= shortlist THEN
830      quicksort l,j
840     ELSE
850       insertionsort l,j
860     END IF
870   END IF
880   IF i < r THEN
890     IF r - 1 >= shortlist THEN
900       quicksort i,r
910     ELSE
920      insertionsort i,r
930     END IF
940   END IF
950 END DEFine
960 :
970 IMPLICIT% this, that, t
975 REFERENCE this, that
980 DEFine PROCedure swap(this,that)
990 LOCal t
1000   LET t=this
1010   LET this=that
1020   LET that=t
1030 END DEFine swap
1040 :
1050 IMPLICIT% first, last, p, item, temporary
1060 DEFine PROCedure insertionsort (first,last)
1070 LOCal p,item,temporary
1080   FOR item=first+1 TO last
1090     LET p=item
1100     LET temporary=b(p)
1110     REPeat compare
1120       IF temporary>=b(p-1) : EXIT compare
1130       IF p=first : EXIT compare
1140       LET b(p)=b(p-1)
1150       LET p=p-1
1160     END REPeat compare
1170     LET b(p)=temporary
1180   END FOR item
1190 END DEFine
1200 :
1210 DEFine PROCedure QUICKSORT1 (bottom,top)
1220 LOCal sort_loop,low,high,ptr
1230   low  = bottom : high = top : ptr = bottom
1240   REPeat sort_loop
1250     IF low >= high : EXIT sort_loop
1260     IF b(low) > b(high) THEN
1270       temp        = b(low)
1280       b(low)  = b(high)
1290       b(high) = temp
1300       IF ptr = low
1310         low  = low+1 : ptr = high
1320       ELSE
1330         high = high-1 : ptr = low
1340       END IF
1350     ELSE
1360       IF ptr = low : high = high-1 : ELSE : low = low+1
1370     END IF
1380   END REPeat sort_loop
1390   IF ABS(top - bottom) < 2 : RETurn
1400   QUICKSORT1 bottom,ptr - 1
1410   QUICKSORT1 ptr + 1,top
1420 END DEFine QUICKSORT1
1430 :
1440 REMark Quicksort, faster variety, by Marcus Jeffery
1450 :
1460 REMark prepare an array to sort, remembering that this routine needs
1470 REMark a predefined 'highest value entry' at the end of the array
1480 REMark QUICKSORT2 also needs the procedure QS2_PARTITION below
1490 DEFine PROCedure QUICKSORT2 (lower,upper)
1500 LOCal part_elem
1510 sorts=sorts+1
1520   IF lower < upper
1530     part_elem = upper + 1
1540     QS2_PARTITION lower,part_elem
1550     QUICKSORT2 lower,part_elem-1
1560     QUICKSORT2 part_elem+1,upper
1570   END IF
1580 END DEFine QUICKSORT2
1590 :
1600 DEFine PROCedure QS2_PARTITION (i,j)
1610 LOCal k,temp,exchange,loop,inc_k,dec_j
1620   temp = b((i+j)/2) : k = i
1630 partitions=partitions+1
1640   REPeat loop
1650 partitions=partitions+1
1660     REPeat inc_k
1670       k = k + 1
1680       REMark this is where the 'guaranteed highest value' comes in
1690       IF b(k) >= temp : EXIT inc_k
1700     END REPeat inc_k
1710     REPeat dec_j
1720       j = j - 1
1730       REMark conversely we don't need a 'guaranteed less than' value
1740       REMark at the start of the array as the sorting process does
1750       REMark this for us anyway
1760       IF b(j) <= temp : EXIT dec_j
1770     END REPeat dec_j
1780     IF k < j
1790       REMark swap the two entries around
1800       swap b(k),b(j)
1810     ELSE
1820       EXIT loop
1830     END IF
1840   END REPeat loop
1850   b(i) = b(j) : b(j) = temp
1860 END DEFine QS2_PARTITION
