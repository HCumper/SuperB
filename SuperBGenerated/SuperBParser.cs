//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\hcump\source\repos\SuperB\SuperB\SuperB.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SuperB {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class SuperBParser : Parser {
	public const int
		Refer=1, Implic=2, Local=3, Dimension=4, DefProc=5, DefFunc=6, EndDef=7, 
		If=8, Else=9, Then=10, EndIf=11, Select=12, EndSelect=13, On=14, For=15, 
		Next=16, To=17, EndFor=18, Step=19, Repeat=20, Exit=21, Until=22, EndRepeat=23, 
		LeftParen=24, RightParen=25, LeftBracket=26, RightBracket=27, Equal=28, 
		NotEqual=29, Less=30, LessEqual=31, Greater=32, GreaterEqual=33, Plus=34, 
		Minus=35, Multiply=36, Divide=37, Mod=38, Div=39, And=40, Or=41, Xor=42, 
		Caret=43, Not=44, Tilde=45, Instr=46, Amp=47, Question=48, Colon=49, Semi=50, 
		Comma=51, Point=52, Bang=53, Whitespace=54, Let=55, Newline=56, String=57, 
		Comment=58, ID=59, Integer=60, Real=61, Unknowntype=62, Void=63, Scalar=64, 
		LineNumber=65;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_stmtlist = 2, RULE_constexpr = 3, 
		RULE_rangeexpr = 4, RULE_stmt = 5, RULE_prochdr = 6, RULE_funchdr = 7, 
		RULE_identifier = 8, RULE_parenthesizedlist = 9, RULE_unparenthesizedlist = 10, 
		RULE_separator = 11, RULE_expr = 12;
	public static readonly string[] ruleNames = {
		"program", "line", "stmtlist", "constexpr", "rangeexpr", "stmt", "prochdr", 
		"funchdr", "identifier", "parenthesizedlist", "unparenthesizedlist", "separator", 
		"expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'REFERENCE'", null, "'LOCal'", "'DIM'", "'DEFine PROCedure'", "'DEFine FuNction'", 
		"'END DEFine'", "'IF'", "'ELSE'", "'THEN'", "'END IF'", "'SELect ON'", 
		"'END SELect'", "'ON'", "'FOR'", "'NEXT'", "'TO'", "'END FOR'", "'STEP'", 
		"'REPeat'", "'EXIT'", "'UNTIL'", "'END REPeat'", "'('", "')'", "'['", 
		"']'", "'='", "'<>'", "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", 
		"'/'", "'MOD'", "'DIV'", "'AND'", "'OR'", "'XOR'", "'^'", "'NOT'", "'~'", 
		"'INSTR'", "'&'", "'?'", "':'", "';'", "','", "'.'", "'!'", null, "'LET'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Refer", "Implic", "Local", "Dimension", "DefProc", "DefFunc", "EndDef", 
		"If", "Else", "Then", "EndIf", "Select", "EndSelect", "On", "For", "Next", 
		"To", "EndFor", "Step", "Repeat", "Exit", "Until", "EndRepeat", "LeftParen", 
		"RightParen", "LeftBracket", "RightBracket", "Equal", "NotEqual", "Less", 
		"LessEqual", "Greater", "GreaterEqual", "Plus", "Minus", "Multiply", "Divide", 
		"Mod", "Div", "And", "Or", "Xor", "Caret", "Not", "Tilde", "Instr", "Amp", 
		"Question", "Colon", "Semi", "Comma", "Point", "Bang", "Whitespace", "Let", 
		"Newline", "String", "Comment", "ID", "Integer", "Real", "Unknowntype", 
		"Void", "Scalar", "LineNumber"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SuperB.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SuperBParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SuperBParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 26; line();
				}
				}
				State = 29;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Refer) | (1L << Implic) | (1L << Local) | (1L << Dimension) | (1L << DefProc) | (1L << DefFunc) | (1L << If) | (1L << Select) | (1L << On) | (1L << For) | (1L << Repeat) | (1L << Exit) | (1L << Newline) | (1L << ID) | (1L << Integer))) != 0) );
			State = 31; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ITerminalNode Newline() { return GetToken(SuperBParser.Newline, 0); }
		public ITerminalNode Integer() { return GetToken(SuperBParser.Integer, 0); }
		public StmtlistContext stmtlist() {
			return GetRuleContext<StmtlistContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(SuperBParser.Colon, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			State = 43;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Integer) {
					{
					State = 33; Match(Integer);
					}
				}

				State = 37;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Refer) | (1L << Implic) | (1L << Local) | (1L << Dimension) | (1L << DefProc) | (1L << DefFunc) | (1L << If) | (1L << Select) | (1L << On) | (1L << For) | (1L << Repeat) | (1L << Exit) | (1L << ID))) != 0)) {
					{
					State = 36; stmtlist();
					}
				}

				State = 39; Match(Newline);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40; Match(Integer);
				State = 41; Match(Colon);
				State = 42; Match(Newline);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtlistContext : ParserRuleContext {
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public StmtlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtlist; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtlistContext stmtlist() {
		StmtlistContext _localctx = new StmtlistContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_stmtlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; stmt();
			State = 50;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 46; Match(Colon);
					State = 47; stmt();
					}
					} 
				}
				State = 52;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstexprContext : ParserRuleContext {
		public ITerminalNode Integer() { return GetToken(SuperBParser.Integer, 0); }
		public ITerminalNode Real() { return GetToken(SuperBParser.Real, 0); }
		public ITerminalNode String() { return GetToken(SuperBParser.String, 0); }
		public ITerminalNode ID() { return GetToken(SuperBParser.ID, 0); }
		public ConstexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constexpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstexprContext constexpr() {
		ConstexprContext _localctx = new ConstexprContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_constexpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << String) | (1L << ID) | (1L << Integer) | (1L << Real))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeexprContext : ParserRuleContext {
		public ConstexprContext[] constexpr() {
			return GetRuleContexts<ConstexprContext>();
		}
		public ConstexprContext constexpr(int i) {
			return GetRuleContext<ConstexprContext>(i);
		}
		public ITerminalNode To() { return GetToken(SuperBParser.To, 0); }
		public RangeexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeexpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeexprContext rangeexpr() {
		RangeexprContext _localctx = new RangeexprContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_rangeexpr);
		try {
			State = 60;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 55; constexpr();
				State = 56; Match(To);
				State = 57; constexpr();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59; constexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LocContext : StmtContext {
		public ITerminalNode Local() { return GetToken(SuperBParser.Local, 0); }
		public UnparenthesizedlistContext unparenthesizedlist() {
			return GetRuleContext<UnparenthesizedlistContext>(0);
		}
		public LocContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongselectContext : StmtContext {
		public ITerminalNode Select() { return GetToken(SuperBParser.Select, 0); }
		public ConstexprContext constexpr() {
			return GetRuleContext<ConstexprContext>(0);
		}
		public ITerminalNode Newline() { return GetToken(SuperBParser.Newline, 0); }
		public ITerminalNode EndSelect() { return GetToken(SuperBParser.EndSelect, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ITerminalNode Integer() { return GetToken(SuperBParser.Integer, 0); }
		public LongselectContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongselect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExitstmtContext : StmtContext {
		public ITerminalNode Exit() { return GetToken(SuperBParser.Exit, 0); }
		public ITerminalNode ID() { return GetToken(SuperBParser.ID, 0); }
		public ExitstmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitstmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncContext : StmtContext {
		public FunchdrContext funchdr() {
			return GetRuleContext<FunchdrContext>(0);
		}
		public ITerminalNode EndDef() { return GetToken(SuperBParser.EndDef, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ITerminalNode Integer() { return GetToken(SuperBParser.Integer, 0); }
		public ITerminalNode ID() { return GetToken(SuperBParser.ID, 0); }
		public FuncContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReferenceContext : StmtContext {
		public ITerminalNode Refer() { return GetToken(SuperBParser.Refer, 0); }
		public UnparenthesizedlistContext unparenthesizedlist() {
			return GetRuleContext<UnparenthesizedlistContext>(0);
		}
		public ReferenceContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DimContext : StmtContext {
		public ITerminalNode Dimension() { return GetToken(SuperBParser.Dimension, 0); }
		public ITerminalNode ID() { return GetToken(SuperBParser.ID, 0); }
		public ParenthesizedlistContext parenthesizedlist() {
			return GetRuleContext<ParenthesizedlistContext>(0);
		}
		public DimContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDim(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongforContext : StmtContext {
		public ITerminalNode For() { return GetToken(SuperBParser.For, 0); }
		public ITerminalNode[] ID() { return GetTokens(SuperBParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(SuperBParser.ID, i);
		}
		public ITerminalNode Equal() { return GetToken(SuperBParser.Equal, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode To() { return GetToken(SuperBParser.To, 0); }
		public ITerminalNode Newline() { return GetToken(SuperBParser.Newline, 0); }
		public ITerminalNode EndFor() { return GetToken(SuperBParser.EndFor, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ITerminalNode Integer() { return GetToken(SuperBParser.Integer, 0); }
		public LongforContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongfor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ProcContext : StmtContext {
		public ProchdrContext prochdr() {
			return GetRuleContext<ProchdrContext>(0);
		}
		public ITerminalNode EndDef() { return GetToken(SuperBParser.EndDef, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ITerminalNode Integer() { return GetToken(SuperBParser.Integer, 0); }
		public ITerminalNode ID() { return GetToken(SuperBParser.ID, 0); }
		public ProcContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentContext : StmtContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Equal() { return GetToken(SuperBParser.Equal, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OnselectContext : StmtContext {
		public ITerminalNode On() { return GetToken(SuperBParser.On, 0); }
		public ITerminalNode Equal() { return GetToken(SuperBParser.Equal, 0); }
		public RangeexprContext rangeexpr() {
			return GetRuleContext<RangeexprContext>(0);
		}
		public ConstexprContext constexpr() {
			return GetRuleContext<ConstexprContext>(0);
		}
		public OnselectContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnselect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShortifContext : StmtContext {
		public ITerminalNode If() { return GetToken(SuperBParser.If, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StmtlistContext[] stmtlist() {
			return GetRuleContexts<StmtlistContext>();
		}
		public StmtlistContext stmtlist(int i) {
			return GetRuleContext<StmtlistContext>(i);
		}
		public ITerminalNode Then() { return GetToken(SuperBParser.Then, 0); }
		public ITerminalNode[] Colon() { return GetTokens(SuperBParser.Colon); }
		public ITerminalNode Colon(int i) {
			return GetToken(SuperBParser.Colon, i);
		}
		public ITerminalNode Else() { return GetToken(SuperBParser.Else, 0); }
		public ShortifContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortif(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongifContext : StmtContext {
		public ITerminalNode If() { return GetToken(SuperBParser.If, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Newline() { return GetToken(SuperBParser.Newline, 0); }
		public ITerminalNode EndIf() { return GetToken(SuperBParser.EndIf, 0); }
		public ITerminalNode Then() { return GetToken(SuperBParser.Then, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ITerminalNode Else() { return GetToken(SuperBParser.Else, 0); }
		public ITerminalNode[] Integer() { return GetTokens(SuperBParser.Integer); }
		public ITerminalNode Integer(int i) {
			return GetToken(SuperBParser.Integer, i);
		}
		public LongifContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongif(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierOnlyContext : StmtContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierOnlyContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOnly(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShortrepeatContext : StmtContext {
		public ITerminalNode Repeat() { return GetToken(SuperBParser.Repeat, 0); }
		public ITerminalNode ID() { return GetToken(SuperBParser.ID, 0); }
		public ITerminalNode Colon() { return GetToken(SuperBParser.Colon, 0); }
		public StmtlistContext stmtlist() {
			return GetRuleContext<StmtlistContext>(0);
		}
		public ShortrepeatContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortrepeat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImplicitContext : StmtContext {
		public ITerminalNode Implic() { return GetToken(SuperBParser.Implic, 0); }
		public UnparenthesizedlistContext unparenthesizedlist() {
			return GetRuleContext<UnparenthesizedlistContext>(0);
		}
		public ImplicitContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShortforContext : StmtContext {
		public ITerminalNode For() { return GetToken(SuperBParser.For, 0); }
		public ITerminalNode ID() { return GetToken(SuperBParser.ID, 0); }
		public ITerminalNode Equal() { return GetToken(SuperBParser.Equal, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode To() { return GetToken(SuperBParser.To, 0); }
		public ITerminalNode Colon() { return GetToken(SuperBParser.Colon, 0); }
		public StmtlistContext stmtlist() {
			return GetRuleContext<StmtlistContext>(0);
		}
		public ShortforContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortfor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongrepeatContext : StmtContext {
		public ITerminalNode Repeat() { return GetToken(SuperBParser.Repeat, 0); }
		public ITerminalNode[] ID() { return GetTokens(SuperBParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(SuperBParser.ID, i);
		}
		public ITerminalNode Newline() { return GetToken(SuperBParser.Newline, 0); }
		public ITerminalNode EndRepeat() { return GetToken(SuperBParser.EndRepeat, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ITerminalNode Integer() { return GetToken(SuperBParser.Integer, 0); }
		public LongrepeatContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongrepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_stmt);
		int _la;
		try {
			int _alt;
			State = 213;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				_localctx = new DimContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; Match(Dimension);
				State = 63; Match(ID);
				State = 64; parenthesizedlist();
				}
				break;

			case 2:
				_localctx = new LocContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; Match(Local);
				State = 66; unparenthesizedlist();
				}
				break;

			case 3:
				_localctx = new ImplicitContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 67; Match(Implic);
				State = 68; unparenthesizedlist();
				}
				break;

			case 4:
				_localctx = new ReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 69; Match(Refer);
				State = 70; unparenthesizedlist();
				}
				break;

			case 5:
				_localctx = new ProcContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 71; prochdr();
				State = 75;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 72; line();
						}
						} 
					}
					State = 77;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
				}
				State = 79;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Integer) {
					{
					State = 78; Match(Integer);
					}
				}

				State = 81; Match(EndDef);
				State = 83;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 82; Match(ID);
					}
				}

				}
				break;

			case 6:
				_localctx = new FuncContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 85; funchdr();
				State = 89;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 86; line();
						}
						} 
					}
					State = 91;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
				}
				State = 93;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Integer) {
					{
					State = 92; Match(Integer);
					}
				}

				State = 95; Match(EndDef);
				State = 97;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 96; Match(ID);
					}
				}

				}
				break;

			case 7:
				_localctx = new LongforContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 99; Match(For);
				State = 100; Match(ID);
				State = 101; Match(Equal);
				State = 102; expr(0);
				State = 103; Match(To);
				State = 104; expr(0);
				State = 105; Match(Newline);
				State = 109;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 106; line();
						}
						} 
					}
					State = 111;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
				}
				State = 113;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Integer) {
					{
					State = 112; Match(Integer);
					}
				}

				State = 115; Match(EndFor);
				State = 117;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 116; Match(ID);
					}
				}

				}
				break;

			case 8:
				_localctx = new ShortforContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 119; Match(For);
				State = 120; Match(ID);
				State = 121; Match(Equal);
				State = 122; expr(0);
				State = 123; Match(To);
				State = 124; expr(0);
				State = 125; Match(Colon);
				State = 126; stmtlist();
				}
				break;

			case 9:
				_localctx = new ShortrepeatContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 128; Match(Repeat);
				State = 129; Match(ID);
				State = 130; Match(Colon);
				State = 131; stmtlist();
				}
				break;

			case 10:
				_localctx = new LongrepeatContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 132; Match(Repeat);
				State = 133; Match(ID);
				State = 134; Match(Newline);
				State = 138;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 135; line();
						}
						} 
					}
					State = 140;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
				}
				State = 142;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Integer) {
					{
					State = 141; Match(Integer);
					}
				}

				{
				State = 144; Match(EndRepeat);
				State = 146;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 145; Match(ID);
					}
				}

				}
				}
				break;

			case 11:
				_localctx = new ShortifContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 148; Match(If);
				State = 149; expr(0);
				State = 150;
				_la = _input.La(1);
				if ( !(_la==Then || _la==Colon) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 151; stmtlist();
				State = 156;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
				case 1:
					{
					State = 152; Match(Colon);
					State = 153; Match(Else);
					State = 154; Match(Colon);
					State = 155; stmtlist();
					}
					break;
				}
				}
				break;

			case 12:
				_localctx = new LongifContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 158; Match(If);
				State = 159; expr(0);
				State = 161;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Then) {
					{
					State = 160; Match(Then);
					}
				}

				State = 163; Match(Newline);
				State = 165;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 164; line();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 167;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 178;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
				case 1:
					{
					State = 170;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==Integer) {
						{
						State = 169; Match(Integer);
						}
					}

					State = 172; Match(Else);
					State = 174;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 173; line();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 176;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				State = 181;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Integer) {
					{
					State = 180; Match(Integer);
					}
				}

				State = 183; Match(EndIf);
				}
				break;

			case 13:
				_localctx = new LongselectContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 185; Match(Select);
				State = 186; constexpr();
				State = 187; Match(Newline);
				State = 191;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 188; line();
						}
						} 
					}
					State = 193;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
				}
				State = 195;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Integer) {
					{
					State = 194; Match(Integer);
					}
				}

				State = 197; Match(EndSelect);
				}
				break;

			case 14:
				_localctx = new OnselectContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 199; Match(On);
				{
				State = 200; constexpr();
				}
				State = 201; Match(Equal);
				State = 202; rangeexpr();
				}
				break;

			case 15:
				_localctx = new ExitstmtContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 204; Match(Exit);
				State = 206;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 205; Match(ID);
					}
				}

				}
				break;

			case 16:
				_localctx = new AssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 208; identifier();
				State = 209; Match(Equal);
				State = 210; expr(0);
				}
				break;

			case 17:
				_localctx = new IdentifierOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 212; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProchdrContext : ParserRuleContext {
		public ProchdrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prochdr; } }
	 
		public ProchdrContext() { }
		public virtual void CopyFrom(ProchdrContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProcheaderContext : ProchdrContext {
		public ITerminalNode DefProc() { return GetToken(SuperBParser.DefProc, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Newline() { return GetToken(SuperBParser.Newline, 0); }
		public ParenthesizedlistContext parenthesizedlist() {
			return GetRuleContext<ParenthesizedlistContext>(0);
		}
		public ProcheaderContext(ProchdrContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcheader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProchdrContext prochdr() {
		ProchdrContext _localctx = new ProchdrContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_prochdr);
		int _la;
		try {
			_localctx = new ProcheaderContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(DefProc);
			State = 216; identifier();
			State = 218;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LeftParen) {
				{
				State = 217; parenthesizedlist();
				}
			}

			State = 220; Match(Newline);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunchdrContext : ParserRuleContext {
		public FunchdrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funchdr; } }
	 
		public FunchdrContext() { }
		public virtual void CopyFrom(FunchdrContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncheaderContext : FunchdrContext {
		public ITerminalNode DefFunc() { return GetToken(SuperBParser.DefFunc, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Newline() { return GetToken(SuperBParser.Newline, 0); }
		public ParenthesizedlistContext parenthesizedlist() {
			return GetRuleContext<ParenthesizedlistContext>(0);
		}
		public FuncheaderContext(FunchdrContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncheader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunchdrContext funchdr() {
		FunchdrContext _localctx = new FunchdrContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_funchdr);
		int _la;
		try {
			_localctx = new FuncheaderContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(DefFunc);
			State = 223; identifier();
			State = 225;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LeftParen) {
				{
				State = 224; parenthesizedlist();
				}
			}

			State = 227; Match(Newline);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SuperBParser.ID, 0); }
		public ParenthesizedlistContext parenthesizedlist() {
			return GetRuleContext<ParenthesizedlistContext>(0);
		}
		public UnparenthesizedlistContext unparenthesizedlist() {
			return GetRuleContext<UnparenthesizedlistContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; Match(ID);
			State = 232;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 230; parenthesizedlist();
				}
				break;

			case 2:
				{
				State = 231; unparenthesizedlist();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedlistContext : ParserRuleContext {
		public ParenthesizedlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedlist; } }
	 
		public ParenthesizedlistContext() { }
		public virtual void CopyFrom(ParenthesizedlistContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedlContext : ParenthesizedlistContext {
		public ITerminalNode LeftParen() { return GetToken(SuperBParser.LeftParen, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode RightParen() { return GetToken(SuperBParser.RightParen, 0); }
		public SeparatorContext[] separator() {
			return GetRuleContexts<SeparatorContext>();
		}
		public SeparatorContext separator(int i) {
			return GetRuleContext<SeparatorContext>(i);
		}
		public ParenthesizedlContext(ParenthesizedlistContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedlistContext parenthesizedlist() {
		ParenthesizedlistContext _localctx = new ParenthesizedlistContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_parenthesizedlist);
		int _la;
		try {
			_localctx = new ParenthesizedlContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(LeftParen);
			State = 235; expr(0);
			State = 241;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << To) | (1L << Semi) | (1L << Comma) | (1L << Bang))) != 0)) {
				{
				{
				State = 236; separator();
				State = 237; expr(0);
				}
				}
				State = 243;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 244; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnparenthesizedlistContext : ParserRuleContext {
		public UnparenthesizedlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unparenthesizedlist; } }
	 
		public UnparenthesizedlistContext() { }
		public virtual void CopyFrom(UnparenthesizedlistContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnparenthesizedContext : UnparenthesizedlistContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SeparatorContext[] separator() {
			return GetRuleContexts<SeparatorContext>();
		}
		public SeparatorContext separator(int i) {
			return GetRuleContext<SeparatorContext>(i);
		}
		public UnparenthesizedContext(UnparenthesizedlistContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnparenthesized(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnparenthesizedlistContext unparenthesizedlist() {
		UnparenthesizedlistContext _localctx = new UnparenthesizedlistContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_unparenthesizedlist);
		try {
			int _alt;
			_localctx = new UnparenthesizedContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; expr(0);
			State = 252;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 247; separator();
					State = 248; expr(0);
					}
					} 
				}
				State = 254;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeparatorContext : ParserRuleContext {
		public ITerminalNode Comma() { return GetToken(SuperBParser.Comma, 0); }
		public ITerminalNode Bang() { return GetToken(SuperBParser.Bang, 0); }
		public ITerminalNode Semi() { return GetToken(SuperBParser.Semi, 0); }
		public ITerminalNode To() { return GetToken(SuperBParser.To, 0); }
		public SeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeparatorContext separator() {
		SeparatorContext _localctx = new SeparatorContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_separator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << To) | (1L << Semi) | (1L << Comma) | (1L << Bang))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotContext : ExprContext {
		public ITerminalNode Not() { return GetToken(SuperBParser.Not, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryAdditiveContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Plus() { return GetToken(SuperBParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(SuperBParser.Minus, 0); }
		public UnaryAdditiveContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryAdditive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentContext : ExprContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstrContext : ExprContext {
		public ITerminalNode Instr() { return GetToken(SuperBParser.Instr, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode String() { return GetToken(SuperBParser.String, 0); }
		public ITerminalNode ID() { return GetToken(SuperBParser.ID, 0); }
		public InstrContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedContext : ExprContext {
		public ITerminalNode LeftParen() { return GetToken(SuperBParser.LeftParen, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(SuperBParser.RightParen, 0); }
		public ParenthesizedContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesized(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralContext : ExprContext {
		public ITerminalNode Integer() { return GetToken(SuperBParser.Integer, 0); }
		public ITerminalNode String() { return GetToken(SuperBParser.String, 0); }
		public ITerminalNode Real() { return GetToken(SuperBParser.Real, 0); }
		public LiteralContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode Amp() { return GetToken(SuperBParser.Amp, 0); }
		public ITerminalNode Caret() { return GetToken(SuperBParser.Caret, 0); }
		public ITerminalNode Multiply() { return GetToken(SuperBParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(SuperBParser.Divide, 0); }
		public ITerminalNode Mod() { return GetToken(SuperBParser.Mod, 0); }
		public ITerminalNode Div() { return GetToken(SuperBParser.Div, 0); }
		public ITerminalNode Plus() { return GetToken(SuperBParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(SuperBParser.Minus, 0); }
		public ITerminalNode Equal() { return GetToken(SuperBParser.Equal, 0); }
		public ITerminalNode NotEqual() { return GetToken(SuperBParser.NotEqual, 0); }
		public ITerminalNode Less() { return GetToken(SuperBParser.Less, 0); }
		public ITerminalNode LessEqual() { return GetToken(SuperBParser.LessEqual, 0); }
		public ITerminalNode Greater() { return GetToken(SuperBParser.Greater, 0); }
		public ITerminalNode GreaterEqual() { return GetToken(SuperBParser.GreaterEqual, 0); }
		public ITerminalNode And() { return GetToken(SuperBParser.And, 0); }
		public ITerminalNode Or() { return GetToken(SuperBParser.Or, 0); }
		public ITerminalNode Xor() { return GetToken(SuperBParser.Xor, 0); }
		public BinaryContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISuperBVisitor<TResult> typedVisitor = visitor as ISuperBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				_localctx = new ParenthesizedContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 258; Match(LeftParen);
				State = 259; expr(0);
				State = 260; Match(RightParen);
				}
				break;

			case 2:
				{
				_localctx = new UnaryAdditiveContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 262;
				_la = _input.La(1);
				if ( !(_la==Plus || _la==Minus) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 263; expr(12);
				}
				break;

			case 3:
				{
				_localctx = new InstrContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 264;
				_la = _input.La(1);
				if ( !(_la==String || _la==ID) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 265; Match(Instr);
				State = 266; expr(10);
				}
				break;

			case 4:
				{
				_localctx = new NotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 267; Match(Not);
				State = 268; expr(5);
				}
				break;

			case 5:
				{
				_localctx = new IdentContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 269; identifier();
				}
				break;

			case 6:
				{
				_localctx = new LiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 270;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << String) | (1L << Integer) | (1L << Real))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 296;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 294;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 273;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 274; Match(Amp);
						State = 275; expr(12);
						}
						break;

					case 2:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 276;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 277; Match(Caret);
						State = 278; expr(9);
						}
						break;

					case 3:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 279;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 280;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Mod) | (1L << Div))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 281; expr(9);
						}
						break;

					case 4:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 282;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 283;
						_la = _input.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 284; expr(8);
						}
						break;

					case 5:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 285;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 286;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << NotEqual) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 287; expr(7);
						}
						break;

					case 6:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 288;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 289; Match(And);
						State = 290; expr(5);
						}
						break;

					case 7:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 291;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 292;
						_la = _input.La(1);
						if ( !(_la==Or || _la==Xor) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 293; expr(4);
						}
						break;
					}
					} 
				}
				State = 298;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 11);

		case 1: return Precpred(_ctx, 9);

		case 2: return Precpred(_ctx, 8);

		case 3: return Precpred(_ctx, 7);

		case 4: return Precpred(_ctx, 6);

		case 5: return Precpred(_ctx, 4);

		case 6: return Precpred(_ctx, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x43\x12E\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x3\x2\x6\x2\x1E"+
		"\n\x2\r\x2\xE\x2\x1F\x3\x2\x3\x2\x3\x3\x5\x3%\n\x3\x3\x3\x5\x3(\n\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x5\x3.\n\x3\x3\x4\x3\x4\x3\x4\a\x4\x33\n\x4\f\x4"+
		"\xE\x4\x36\v\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6?\n\x6"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\a\aL\n\a\f\a\xE"+
		"\aO\v\a\x3\a\x5\aR\n\a\x3\a\x3\a\x5\aV\n\a\x3\a\x3\a\a\aZ\n\a\f\a\xE\a"+
		"]\v\a\x3\a\x5\a`\n\a\x3\a\x3\a\x5\a\x64\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\a\an\n\a\f\a\xE\aq\v\a\x3\a\x5\at\n\a\x3\a\x3\a\x5\ax\n\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\a\a\x8B\n\a\f\a\xE\a\x8E\v\a\x3\a\x5\a\x91\n\a\x3\a\x3"+
		"\a\x5\a\x95\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x9F\n\a\x3"+
		"\a\x3\a\x3\a\x5\a\xA4\n\a\x3\a\x3\a\x6\a\xA8\n\a\r\a\xE\a\xA9\x3\a\x5"+
		"\a\xAD\n\a\x3\a\x3\a\x6\a\xB1\n\a\r\a\xE\a\xB2\x5\a\xB5\n\a\x3\a\x5\a"+
		"\xB8\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\a\a\xC0\n\a\f\a\xE\a\xC3\v\a\x3"+
		"\a\x5\a\xC6\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\xD1"+
		"\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\xD8\n\a\x3\b\x3\b\x3\b\x5\b\xDD\n\b"+
		"\x3\b\x3\b\x3\t\x3\t\x3\t\x5\t\xE4\n\t\x3\t\x3\t\x3\n\x3\n\x3\n\x5\n\xEB"+
		"\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\xF2\n\v\f\v\xE\v\xF5\v\v\x3\v\x3\v\x3"+
		"\f\x3\f\x3\f\x3\f\a\f\xFD\n\f\f\f\xE\f\x100\v\f\x3\r\x3\r\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x5\xE\x112\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\a\xE\x129\n\xE\f\xE\xE\xE\x12C\v\xE\x3\xE\x2\x2\x3\x1A\xF\x2\x2"+
		"\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x2\v\x4\x2;;=?\x4\x2\f\f\x33\x33\x5\x2\x13\x13\x34\x35\x37\x37\x3"+
		"\x2$%\x4\x2;;==\x4\x2;;>?\x3\x2&)\x3\x2\x1E#\x3\x2+,\x15E\x2\x1D\x3\x2"+
		"\x2\x2\x4-\x3\x2\x2\x2\x6/\x3\x2\x2\x2\b\x37\x3\x2\x2\x2\n>\x3\x2\x2\x2"+
		"\f\xD7\x3\x2\x2\x2\xE\xD9\x3\x2\x2\x2\x10\xE0\x3\x2\x2\x2\x12\xE7\x3\x2"+
		"\x2\x2\x14\xEC\x3\x2\x2\x2\x16\xF8\x3\x2\x2\x2\x18\x101\x3\x2\x2\x2\x1A"+
		"\x111\x3\x2\x2\x2\x1C\x1E\x5\x4\x3\x2\x1D\x1C\x3\x2\x2\x2\x1E\x1F\x3\x2"+
		"\x2\x2\x1F\x1D\x3\x2\x2\x2\x1F \x3\x2\x2\x2 !\x3\x2\x2\x2!\"\a\x2\x2\x3"+
		"\"\x3\x3\x2\x2\x2#%\a>\x2\x2$#\x3\x2\x2\x2$%\x3\x2\x2\x2%\'\x3\x2\x2\x2"+
		"&(\x5\x6\x4\x2\'&\x3\x2\x2\x2\'(\x3\x2\x2\x2()\x3\x2\x2\x2).\a:\x2\x2"+
		"*+\a>\x2\x2+,\a\x33\x2\x2,.\a:\x2\x2-$\x3\x2\x2\x2-*\x3\x2\x2\x2.\x5\x3"+
		"\x2\x2\x2/\x34\x5\f\a\x2\x30\x31\a\x33\x2\x2\x31\x33\x5\f\a\x2\x32\x30"+
		"\x3\x2\x2\x2\x33\x36\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34\x35\x3\x2\x2"+
		"\x2\x35\a\x3\x2\x2\x2\x36\x34\x3\x2\x2\x2\x37\x38\t\x2\x2\x2\x38\t\x3"+
		"\x2\x2\x2\x39:\x5\b\x5\x2:;\a\x13\x2\x2;<\x5\b\x5\x2<?\x3\x2\x2\x2=?\x5"+
		"\b\x5\x2>\x39\x3\x2\x2\x2>=\x3\x2\x2\x2?\v\x3\x2\x2\x2@\x41\a\x6\x2\x2"+
		"\x41\x42\a=\x2\x2\x42\xD8\x5\x14\v\x2\x43\x44\a\x5\x2\x2\x44\xD8\x5\x16"+
		"\f\x2\x45\x46\a\x4\x2\x2\x46\xD8\x5\x16\f\x2GH\a\x3\x2\x2H\xD8\x5\x16"+
		"\f\x2IM\x5\xE\b\x2JL\x5\x4\x3\x2KJ\x3\x2\x2\x2LO\x3\x2\x2\x2MK\x3\x2\x2"+
		"\x2MN\x3\x2\x2\x2NQ\x3\x2\x2\x2OM\x3\x2\x2\x2PR\a>\x2\x2QP\x3\x2\x2\x2"+
		"QR\x3\x2\x2\x2RS\x3\x2\x2\x2SU\a\t\x2\x2TV\a=\x2\x2UT\x3\x2\x2\x2UV\x3"+
		"\x2\x2\x2V\xD8\x3\x2\x2\x2W[\x5\x10\t\x2XZ\x5\x4\x3\x2YX\x3\x2\x2\x2Z"+
		"]\x3\x2\x2\x2[Y\x3\x2\x2\x2[\\\x3\x2\x2\x2\\_\x3\x2\x2\x2][\x3\x2\x2\x2"+
		"^`\a>\x2\x2_^\x3\x2\x2\x2_`\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61\x63\a\t\x2"+
		"\x2\x62\x64\a=\x2\x2\x63\x62\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\xD8\x3"+
		"\x2\x2\x2\x65\x66\a\x11\x2\x2\x66g\a=\x2\x2gh\a\x1E\x2\x2hi\x5\x1A\xE"+
		"\x2ij\a\x13\x2\x2jk\x5\x1A\xE\x2ko\a:\x2\x2ln\x5\x4\x3\x2ml\x3\x2\x2\x2"+
		"nq\x3\x2\x2\x2om\x3\x2\x2\x2op\x3\x2\x2\x2ps\x3\x2\x2\x2qo\x3\x2\x2\x2"+
		"rt\a>\x2\x2sr\x3\x2\x2\x2st\x3\x2\x2\x2tu\x3\x2\x2\x2uw\a\x14\x2\x2vx"+
		"\a=\x2\x2wv\x3\x2\x2\x2wx\x3\x2\x2\x2x\xD8\x3\x2\x2\x2yz\a\x11\x2\x2z"+
		"{\a=\x2\x2{|\a\x1E\x2\x2|}\x5\x1A\xE\x2}~\a\x13\x2\x2~\x7F\x5\x1A\xE\x2"+
		"\x7F\x80\a\x33\x2\x2\x80\x81\x5\x6\x4\x2\x81\xD8\x3\x2\x2\x2\x82\x83\a"+
		"\x16\x2\x2\x83\x84\a=\x2\x2\x84\x85\a\x33\x2\x2\x85\xD8\x5\x6\x4\x2\x86"+
		"\x87\a\x16\x2\x2\x87\x88\a=\x2\x2\x88\x8C\a:\x2\x2\x89\x8B\x5\x4\x3\x2"+
		"\x8A\x89\x3\x2\x2\x2\x8B\x8E\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8D\x3"+
		"\x2\x2\x2\x8D\x90\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8F\x91\a>\x2\x2\x90"+
		"\x8F\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\x94\a\x19"+
		"\x2\x2\x93\x95\a=\x2\x2\x94\x93\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\xD8"+
		"\x3\x2\x2\x2\x96\x97\a\n\x2\x2\x97\x98\x5\x1A\xE\x2\x98\x99\t\x3\x2\x2"+
		"\x99\x9E\x5\x6\x4\x2\x9A\x9B\a\x33\x2\x2\x9B\x9C\a\v\x2\x2\x9C\x9D\a\x33"+
		"\x2\x2\x9D\x9F\x5\x6\x4\x2\x9E\x9A\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F"+
		"\xD8\x3\x2\x2\x2\xA0\xA1\a\n\x2\x2\xA1\xA3\x5\x1A\xE\x2\xA2\xA4\a\f\x2"+
		"\x2\xA3\xA2\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xA7"+
		"\a:\x2\x2\xA6\xA8\x5\x4\x3\x2\xA7\xA6\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2"+
		"\xA9\xA7\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\xB4\x3\x2\x2\x2\xAB\xAD\a"+
		">\x2\x2\xAC\xAB\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE"+
		"\xB0\a\v\x2\x2\xAF\xB1\x5\x4\x3\x2\xB0\xAF\x3\x2\x2\x2\xB1\xB2\x3\x2\x2"+
		"\x2\xB2\xB0\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB5\x3\x2\x2\x2\xB4\xAC"+
		"\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB7\x3\x2\x2\x2\xB6\xB8\a>\x2\x2"+
		"\xB7\xB6\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\xBA\a"+
		"\r\x2\x2\xBA\xD8\x3\x2\x2\x2\xBB\xBC\a\xE\x2\x2\xBC\xBD\x5\b\x5\x2\xBD"+
		"\xC1\a:\x2\x2\xBE\xC0\x5\x4\x3\x2\xBF\xBE\x3\x2\x2\x2\xC0\xC3\x3\x2\x2"+
		"\x2\xC1\xBF\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC5\x3\x2\x2\x2\xC3\xC1"+
		"\x3\x2\x2\x2\xC4\xC6\a>\x2\x2\xC5\xC4\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2"+
		"\xC6\xC7\x3\x2\x2\x2\xC7\xC8\a\xF\x2\x2\xC8\xD8\x3\x2\x2\x2\xC9\xCA\a"+
		"\x10\x2\x2\xCA\xCB\x5\b\x5\x2\xCB\xCC\a\x1E\x2\x2\xCC\xCD\x5\n\x6\x2\xCD"+
		"\xD8\x3\x2\x2\x2\xCE\xD0\a\x17\x2\x2\xCF\xD1\a=\x2\x2\xD0\xCF\x3\x2\x2"+
		"\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD8\x3\x2\x2\x2\xD2\xD3\x5\x12\n\x2\xD3\xD4"+
		"\a\x1E\x2\x2\xD4\xD5\x5\x1A\xE\x2\xD5\xD8\x3\x2\x2\x2\xD6\xD8\x5\x12\n"+
		"\x2\xD7@\x3\x2\x2\x2\xD7\x43\x3\x2\x2\x2\xD7\x45\x3\x2\x2\x2\xD7G\x3\x2"+
		"\x2\x2\xD7I\x3\x2\x2\x2\xD7W\x3\x2\x2\x2\xD7\x65\x3\x2\x2\x2\xD7y\x3\x2"+
		"\x2\x2\xD7\x82\x3\x2\x2\x2\xD7\x86\x3\x2\x2\x2\xD7\x96\x3\x2\x2\x2\xD7"+
		"\xA0\x3\x2\x2\x2\xD7\xBB\x3\x2\x2\x2\xD7\xC9\x3\x2\x2\x2\xD7\xCE\x3\x2"+
		"\x2\x2\xD7\xD2\x3\x2\x2\x2\xD7\xD6\x3\x2\x2\x2\xD8\r\x3\x2\x2\x2\xD9\xDA"+
		"\a\a\x2\x2\xDA\xDC\x5\x12\n\x2\xDB\xDD\x5\x14\v\x2\xDC\xDB\x3\x2\x2\x2"+
		"\xDC\xDD\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\xDF\a:\x2\x2\xDF\xF\x3\x2"+
		"\x2\x2\xE0\xE1\a\b\x2\x2\xE1\xE3\x5\x12\n\x2\xE2\xE4\x5\x14\v\x2\xE3\xE2"+
		"\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE6\a:\x2\x2"+
		"\xE6\x11\x3\x2\x2\x2\xE7\xEA\a=\x2\x2\xE8\xEB\x5\x14\v\x2\xE9\xEB\x5\x16"+
		"\f\x2\xEA\xE8\x3\x2\x2\x2\xEA\xE9\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB"+
		"\x13\x3\x2\x2\x2\xEC\xED\a\x1A\x2\x2\xED\xF3\x5\x1A\xE\x2\xEE\xEF\x5\x18"+
		"\r\x2\xEF\xF0\x5\x1A\xE\x2\xF0\xF2\x3\x2\x2\x2\xF1\xEE\x3\x2\x2\x2\xF2"+
		"\xF5\x3\x2\x2\x2\xF3\xF1\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF6\x3\x2"+
		"\x2\x2\xF5\xF3\x3\x2\x2\x2\xF6\xF7\a\x1B\x2\x2\xF7\x15\x3\x2\x2\x2\xF8"+
		"\xFE\x5\x1A\xE\x2\xF9\xFA\x5\x18\r\x2\xFA\xFB\x5\x1A\xE\x2\xFB\xFD\x3"+
		"\x2\x2\x2\xFC\xF9\x3\x2\x2\x2\xFD\x100\x3\x2\x2\x2\xFE\xFC\x3\x2\x2\x2"+
		"\xFE\xFF\x3\x2\x2\x2\xFF\x17\x3\x2\x2\x2\x100\xFE\x3\x2\x2\x2\x101\x102"+
		"\t\x4\x2\x2\x102\x19\x3\x2\x2\x2\x103\x104\b\xE\x1\x2\x104\x105\a\x1A"+
		"\x2\x2\x105\x106\x5\x1A\xE\x2\x106\x107\a\x1B\x2\x2\x107\x112\x3\x2\x2"+
		"\x2\x108\x109\t\x5\x2\x2\x109\x112\x5\x1A\xE\xE\x10A\x10B\t\x6\x2\x2\x10B"+
		"\x10C\a\x30\x2\x2\x10C\x112\x5\x1A\xE\f\x10D\x10E\a.\x2\x2\x10E\x112\x5"+
		"\x1A\xE\a\x10F\x112\x5\x12\n\x2\x110\x112\t\a\x2\x2\x111\x103\x3\x2\x2"+
		"\x2\x111\x108\x3\x2\x2\x2\x111\x10A\x3\x2\x2\x2\x111\x10D\x3\x2\x2\x2"+
		"\x111\x10F\x3\x2\x2\x2\x111\x110\x3\x2\x2\x2\x112\x12A\x3\x2\x2\x2\x113"+
		"\x114\f\r\x2\x2\x114\x115\a\x31\x2\x2\x115\x129\x5\x1A\xE\xE\x116\x117"+
		"\f\v\x2\x2\x117\x118\a-\x2\x2\x118\x129\x5\x1A\xE\v\x119\x11A\f\n\x2\x2"+
		"\x11A\x11B\t\b\x2\x2\x11B\x129\x5\x1A\xE\v\x11C\x11D\f\t\x2\x2\x11D\x11E"+
		"\t\x5\x2\x2\x11E\x129\x5\x1A\xE\n\x11F\x120\f\b\x2\x2\x120\x121\t\t\x2"+
		"\x2\x121\x129\x5\x1A\xE\t\x122\x123\f\x6\x2\x2\x123\x124\a*\x2\x2\x124"+
		"\x129\x5\x1A\xE\a\x125\x126\f\x5\x2\x2\x126\x127\t\n\x2\x2\x127\x129\x5"+
		"\x1A\xE\x6\x128\x113\x3\x2\x2\x2\x128\x116\x3\x2\x2\x2\x128\x119\x3\x2"+
		"\x2\x2\x128\x11C\x3\x2\x2\x2\x128\x11F\x3\x2\x2\x2\x128\x122\x3\x2\x2"+
		"\x2\x128\x125\x3\x2\x2\x2\x129\x12C\x3\x2\x2\x2\x12A\x128\x3\x2\x2\x2"+
		"\x12A\x12B\x3\x2\x2\x2\x12B\x1B\x3\x2\x2\x2\x12C\x12A\x3\x2\x2\x2\'\x1F"+
		"$\'-\x34>MQU[_\x63osw\x8C\x90\x94\x9E\xA3\xA9\xAC\xB2\xB4\xB7\xC1\xC5"+
		"\xD0\xD7\xDC\xE3\xEA\xF3\xFE\x111\x128\x12A";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SuperB
